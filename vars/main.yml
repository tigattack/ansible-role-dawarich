---

dawarich_default_app_hosts: ['localhost', '::1', '127.0.0.1']
dawarich_combined_app_hosts: >-
  {{ ((dawarich_app_hosts | split(',') if dawarich_app_hosts else []) + dawarich_default_app_hosts) | join(',') }}

dawarich_env_shared:
  TIME_ZONE: "{{ dawarich_timezone }}"
  RAILS_ENV: "{{ dawarich_rails_env }}"
  DATABASE_HOST: "{{ dawarich_postgis_host }}"
  DATABASE_USERNAME: "{{ dawarich_postgis_username }}"
  DATABASE_PASSWORD: "{{ dawarich_postgis_password }}"
  DATABASE_NAME: "{{ dawarich_postgis_db_name }}"
  QUEUE_DATABASE_PATH: "/dawarich_db_data/dawarich_queue.sqlite3"
  CACHE_DATABASE_PATH: "/dawarich_db_data/dawarich_cache.sqlite3"
  CABLE_DATABASE_PATH: "/dawarich_db_data/dawarich_cable.sqlite3"
  APPLICATION_HOSTS: "{{ dawarich_combined_app_hosts }}"
  APPLICATION_PROTOCOL: "{{ dawarich_app_protocol }}"
  REVERSE_GEOCODING_ENABLED: "{{ dawarich_reverse_geocoding_enabled | string | lower }}"
  PHOTON_API_HOST: "{{ dawarich_photon_api_host }}"
  PHOTON_API_USE_HTTPS: "{{ dawarich_photon_api_use_https | string | lower }}"
  PROMETHEUS_EXPORTER_ENABLED: "{{ dawarich_enable_prometheus_metrics | string | lower }}"
  PROMETHEUS_EXPORTER_HOST: '0.0.0.0'
  PROMETHEUS_EXPORTER_PORT: '9394'
  RAILS_MAX_THREADS: "{{ dawarich_rails_max_threads | string }}"
  SECRET_KEY_BASE: "{{ dawarich_encryption_secret_key | string }}"
  RAILS_LOG_TO_STDOUT: "true"
  SELF_HOSTED: "true"
  MIN_MINUTES_SPENT_IN_CITY: "{{ dawarich_min_minutes_spent_in_city | string | lower }}"

dawarich_app_env: "{{ dawarich_env_shared | combine(dawarich_app_extra_env, recursive=true) }}"

dawarich_photon_env: |
  {{ ({
        'COUNTRY_CODE': dawarich_photon_country_code
      } if dawarich_photon_country_code | length > 0 else {})
    | combine(dawarich_photon_extra_env)
  }}

dawarich_app_ports: |
  {{
    [dawarich_port ~ ':3000'] + ([dawarich_prometheus_port ~ ':9394'] if dawarich_enable_prometheus_metrics else [] )
  }}

dawarich_postgis_host_path: "{{ [dawarich_data_path, 'db'] | path_join }}"

dawarich_postgis_volumes: |
  {{
    (
      [dawarich_postgis_config_host_path + ':/etc/postgresql/postgres.conf:ro']
      if dawarich_postgis_use_custom_config else []
    ) + [dawarich_postgis_host_path + ':/var/lib/postgresql/data']
  }}

dawarich_app_container:
  - name: dawarich-server
    image: freikin/dawarich:{{ dawarich_version }}
    restart_policy: unless-stopped
    interactive: true
    tty: true
    healthcheck:
      test:
        - "CMD-SHELL"
        - "wget -qO - http://127.0.0.1:3000/api/v1/health | grep -q 'ok'"
      interval: 10s
      retries: 30
      start_period: 30s
      timeout: 10s
    labels:
      deployment_name: dawarich
    entrypoint: web-entrypoint.sh
    command: ['bin/rails', 'server', '-p', '3000', '-b', '::']
    networks: [{name: "{{ dawarich_docker_network_name }}"}]
    ports: "{{ dawarich_app_ports }}"
    volumes:
      - "{{ [dawarich_data_path, 'public'] | path_join }}:/var/app/public"
      - "{{ [dawarich_data_path, 'watched'] | path_join }}:/var/app/tmp/imports/watched"
      - "{{ [dawarich_data_path, 'storage'] | path_join }}:/var/app/storage"
      - "{{ [dawarich_data_path, 'worker_db'] | path_join }}:/dawarich_db_data"
    env: "{{ dawarich_app_env }}"
    state: healthy

dawarich_postgis_container:
  name: dawarich-db
  image: postgis/postgis:{{ dawarich_postgis_version }}
  command: "{{ 'postgres -c config_file=/etc/postgresql/postgres.conf' if dawarich_postgis_use_custom_config else 'postgres' }}"
  restart_policy: unless-stopped
  shm_size: 1G
  healthcheck:
    test:
      - "CMD-SHELL"
      - "pg_isready -U {{ dawarich_postgis_username }} -d {{ dawarich_postgis_db_name }}"
    interval: 10s
    retries: 5
    start_period: 30s
    timeout: 10s
  labels:
    deployment_name: dawarich
  networks: [{name: "{{ dawarich_docker_network_name }}"}]
  volumes: "{{ dawarich_postgis_volumes }}"
  env:
    POSTGRES_USER: "{{ dawarich_postgis_username }}"
    POSTGRES_PASSWORD: "{{ dawarich_postgis_password }}"
    POSTGRES_DB: "{{ dawarich_postgis_db_name }}"
  state: healthy

dawarich_photon_container:
  name: dawarich-photon
  image: rtuszik/photon-docker:{{ dawarich_photon_version }}
  restart_policy: unless-stopped
  healthcheck:
    test:
      - "CMD-SHELL"
      - "curl -Gs 'http://localhost:2322/api' | grep -q 'missing search term'"
    interval: 10s
    retries: 5
    start_period: 30s
    timeout: 10s
  labels:
    deployment_name: dawarich
  networks: [{name: "{{ dawarich_docker_network_name }}"}]
  ports: ["{{ dawarich_photon_port }}:2322"]
  volumes: ["{{ dawarich_photon_data_path }}:/photon/photon_data"]
  env: "{{ dawarich_photon_env }}"
  state: started

dawarich_containers: "{{ ([dawarich_postgis_container] if dawarich_deploy_postgis else []) + dawarich_app_container }}"

dawarich_photon_data_path_segments: "{{ dawarich_photon_data_path | regex_replace('^/', '') | split('/') }}"
dawarich_photon_data_path_combinations: []

dawarich_postgis_config_host_path: "{{ [dawarich_data_path, 'postgres.conf'] | path_join }}"
