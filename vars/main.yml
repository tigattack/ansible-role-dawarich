---

dawarich_default_app_hosts: ['localhost', '::1', '127.0.0.1']
dawarich_combined_app_hosts: >-
  {{ ((dawarich_app_hosts | split(',') if dawarich_app_hosts else []) + dawarich_default_app_hosts) | join(',') }}

dawarich_env_shared:
  TIME_ZONE: "{{ dawarich_timezone }}"
  RAILS_ENV: production
  REDIS_URL: redis://{{ dawarich_redis_host }}:{{ dawarich_redis_port }}/{{ dawarich_redis_db_number }}
  DATABASE_HOST: "{{ dawarich_postgres_host }}"
  DATABASE_USERNAME: "{{ dawarich_postgres_username }}"
  DATABASE_PASSWORD: "{{ dawarich_postgres_password }}"
  DATABASE_NAME: "{{ dawarich_postgres_db_name }}"
  APPLICATION_HOSTS: "{{ dawarich_combined_app_hosts }}"
  APPLICATION_PROTOCOL: "{{ dawarich_app_protocol }}"
  DISTANCE_UNIT: "{{ dawarich_distance_unit }}"
  REVERSE_GEOCODING_ENABLED: "{{ dawarich_reverse_geocoding_enabled | string | lower }}"
  PHOTON_API_HOST: "{{ dawarich_photon_api_host }}"
  PHOTON_API_USE_HTTPS: "{{ dawarich_photon_api_use_https | string | lower }}"
  PROMETHEUS_EXPORTER_ENABLED: "{{ dawarich_enable_prometheus_metrics | string | lower }}"
  PROMETHEUS_EXPORTER_PORT: '9394'
  RAILS_MAX_THREADS: "{{ dawarich_workers_count * dawarich_background_processing_concurrency }}"
  SECRET_KEY_BASE: "{{ dawarich_encryption_secret_key | string }}"
  RAILS_LOG_TO_STDOUT: "true"

dawarich_app_env: |
  {{ {
        'MIN_MINUTES_SPENT_IN_CITY': dawarich_min_minutes_spent_in_city | string | lower,
        'PROMETHEUS_EXPORTER_HOST': '0.0.0.0',
        'ENABLE_TELEMETRY': dawarich_enable_telemetry | string | lower,
    } | combine(dawarich_env_shared, dawarich_app_extra_env) }}

dawarich_sidekiq_env: |
  {{ {
        'BACKGROUND_PROCESSING_CONCURRENCY': dawarich_background_processing_concurrency | string | lower,
        'PROMETHEUS_EXPORTER_HOST': 'dawarich-server',
    } | combine(dawarich_env_shared, dawarich_sidekiq_extra_env)
  }}

dawarich_photon_env: |
  {{ ({
        'COUNTRY_CODE': dawarich_photon_country_code
      } if dawarich_photon_country_code | length > 0 else omit)
    | combine(dawarich_photon_extra_env)
  }}

dawarich_app_ports: |
  {{
    [dawarich_port ~ ':3000'] + ([dawarich_prometheus_port ~ ':9394'] if dawarich_enable_prometheus_metrics else [] )
  }}

dawarich_postgres_volumes_static:
  - "{{ [dawarich_data_path, 'db'] | path_join }}:/var/lib/postgresql/data"
  - "{{ [dawarich_data_path, 'redis'] | path_join }}:/var/shared"

dawarich_postgres_volumes: |
  {{ ([dawarich_postgres_config_host_path + ':/etc/postgresql/postgres.conf:ro']
    if dawarich_postgres_use_custom_config else [] ) + dawarich_postgres_volumes_static }}

dawarich_app_container:
  - name: dawarich-server
    image: freikin/dawarich:{{ dawarich_version }}
    restart_policy: unless-stopped
    interactive: true
    tty: true
    healthcheck:
      test:
        - "CMD-SHELL"
        - "wget -qO - http://127.0.0.1:3000/api/v1/health | grep -q 'ok'"
      interval: 10s
      retries: 30
      start_period: 30s
      timeout: 10s
    labels:
      deployment_name: dawarich
    entrypoint: web-entrypoint.sh
    command: ['bin/rails', 'server', '-p', '3000', '-b', '::']
    networks: [{name: "{{ dawarich_docker_network_name }}"}]
    ports: "{{ dawarich_app_ports }}"
    volumes:
      - "{{ [dawarich_data_path, 'public'] | path_join }}:/var/app/public"
      - "{{ [dawarich_data_path, 'watched'] | path_join }}:/var/app/tmp/imports/watched"
    env: "{{ dawarich_app_env }}"
    state: healthy

dawarich_worker_container:
  name: dawarich-sidekiq
  image: freikin/dawarich:{{ dawarich_version }}
  restart_policy: unless-stopped
  interactive: true
  tty: true
  healthcheck:
    test:
      - "CMD-SHELL"
      - "bundle exec sidekiqmon processes | grep ${HOSTNAME}"
    interval: 10s
    retries: 30
    start_period: 30s
    timeout: 10s
  labels:
    deployment_name: dawarich
  entrypoint: sidekiq-entrypoint.sh
  command: sidekiq
  networks: [{name: "{{ dawarich_docker_network_name }}"}]
  volumes:
    - "{{ [dawarich_data_path, 'public'] | path_join }}:/var/app/public"
  env: "{{ dawarich_sidekiq_env }}"
  state: healthy

dawarich_workers: |
  {%- set workers = [] %}
  {%- for i in range(1, dawarich_workers_count + 1) %}
    {%- set _ = workers.append(dawarich_worker_container | combine({'name': 'dawarich-sidekiq-' ~ i})) %}
  {%- endfor %}
  {{ workers }}

dawarich_redis_container:
  name: dawarich-redis
  image: redis:{{ dawarich_redis_version }}
  restart_policy: unless-stopped
  healthcheck:
    test:
      - "CMD-SHELL"
      - "redis-cli"
      - "--raw"
      - "incr"
      - "ping"
    interval: 10s
    retries: 5
    start_period: 30s
    timeout: 10s
  labels:
    deployment_name: dawarich
  networks: [{name: "{{ dawarich_docker_network_name }}"}]
  volumes:
    - "{{ [dawarich_data_path, 'redis'] | path_join }}:/data"
  state: healthy

dawarich_postgres_container:
  name: dawarich-db
  image: postgres:{{ dawarich_postgres_version }}
  command: "{{ 'postgres -c config_file=/etc/postgresql/postgres.conf' if dawarich_postgres_use_custom_config else 'postgres' }}"
  restart_policy: unless-stopped
  shm_size: 1G
  healthcheck:
    test:
      - "CMD-SHELL"
      - "pg_isready -U postgres -d {{ dawarich_postgres_db_name }}"
    interval: 10s
    retries: 5
    start_period: 30s
    timeout: 10s
  labels:
    deployment_name: dawarich
  networks: [{name: "{{ dawarich_docker_network_name }}"}]
  volumes: "{{ dawarich_postgres_volumes }}"
  env:
    POSTGRES_USER: "{{ dawarich_postgres_username }}"
    POSTGRES_PASSWORD: "{{ dawarich_postgres_password }}"
  state: healthy

dawarich_photon_container:
  name: dawarich-photon
  image: rtuszik/photon-docker:{{ dawarich_photon_version }}
  restart_policy: unless-stopped
  healthcheck:
    test:
      - "CMD-SHELL"
      - "curl -Gs 'http://localhost:2322/api' | grep -q 'missing search term'"
    interval: 10s
    retries: 5
    start_period: 30s
    timeout: 10s
  labels:
    deployment_name: dawarich
  networks: [{name: "{{ dawarich_docker_network_name }}"}]
  ports: ["{{ dawarich_photon_port }}:2322"]
  volumes: ["{{ dawarich_photon_data_path }}:/photon/photon_data"]
  env: "{{ dawarich_photon_env }}"
  state: started

dawarich_containers: |
  {% set additional_containers = [] -%}
  {% if dawarich_deploy_redis -%}
    {% set additional_containers = [dawarich_redis_container] + additional_containers -%}
  {% endif -%}
  {% if dawarich_deploy_postgres -%}
    {% set additional_containers = [dawarich_postgres_container] + additional_containers -%}
  {% endif -%}
  {{ additional_containers + dawarich_app_container + dawarich_workers }}

dawarich_photon_data_path_segments: "{{ dawarich_photon_data_path | regex_replace('^/', '') | split('/') }}"
dawarich_photon_data_path_combinations: []

dawarich_postgres_config_host_path: "{{ [dawarich_data_path, 'postgres.conf'] | path_join }}"
