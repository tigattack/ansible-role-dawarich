---

- name: Asset dawarich_version is supported
  ansible.builtin.assert:
    that: >-
      dawarich_version in ['latest', 'prod', 'rc'] or
      dawarich_version | split('-') | first >= lookup('ansible.builtin.file', 'min_dawarich_version.txt')
    success_msg: Dawarich version '{{ dawarich_version }}' supported.
    fail_msg: |
      Dawarich version '{{ dawarich_version }}' is not supported.
      Try specifying a newer Dawarich version or, if using a named/text tag (e.g. latest, though this is supported), open an issue on GitHub to request support:
      https://github.com/tigattack/ansible-role-dawarich

- name: Assert dawarich_workers_count is at least 1
  ansible.builtin.assert:
    that: dawarich_workers_count >= 1
    fail_msg: dawarich_workers_count must be at least 1

- name: Ensure Dawarich data directory exists
  ansible.builtin.file:
    path: "{{ dawarich_data_path }}"
    mode: '0755'
    owner: root
    group: root
    state: directory

- name: PostgreSQL config file
  when:
    - dawarich_deploy_postgres
    - dawarich_postgres_use_custom_config
  notify: Restart dawarich-db
  block:
    - name: Copy PostgreSQL config file
      ansible.builtin.copy:
        src: "{{ dawarich_postgres_conf_file }}"
        dest: "{{ dawarich_postgres_config_host_path }}"
        mode: '0644'
        owner: root
        group: root
      when: dawarich_postgres_conf_file | length > 0
      notify: Restart dawarich-db

    - name: Download Dawarich's default PostgreSQL config
      ansible.builtin.get_url:
        url: https://raw.githubusercontent.com/Freika/dawarich/refs/heads/master/postgresql.conf.example
        dest: "{{ dawarich_postgres_config_host_path }}"
        mode: '0644'
        owner: root
        group: root
      when: dawarich_postgres_conf_file | length == 0
      notify: Restart dawarich-db

- name: Create Dawarich Docker network
  community.docker.docker_network:
    name: "{{ dawarich_docker_network_name }}"
    state: present

- name: Deploy Dawarich containers and await healthy state # noqa args[module]
  community.docker.docker_container: "{{ item }}"
  loop: "{{ dawarich_containers | from_yaml }}"
  loop_control:
    label: "{{ item.name }}"
  notify: Prune Docker images

- name: Include deploy_photon.yml
  ansible.builtin.include_tasks:
    file: deploy_photon.yml
  when: dawarich_deploy_photon

- name: Include cleanup.yml
  ansible.builtin.include_tasks:
    file: cleanup.yml
