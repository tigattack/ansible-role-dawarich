---

- name: Discover SQLite databases in PostGIS data directory
  ansible.builtin.find:
    paths: "{{ dawarich_postgis_host_path }}"
    patterns: "*.sqlite*"
  register: sqlite_databases

- name: Migrate SQLite databases to dedicated directory
  when: sqlite_databases.matched > 0
  block:
    - name: Ensure migration target directory exists
      ansible.builtin.file:
        path: "{{ [dawarich_data_path, 'worker_db'] | path_join }}"
        mode: '0755'
        owner: root
        group: root
        state: directory

    - name: Ensure migration target directory is empty
      ansible.builtin.find:
        paths: "{{ [dawarich_data_path, 'worker_db'] | path_join }}"
        file_type: file
      register: migration_target_files

    - name: Perform migration
      when: migration_target_files.matched == 0
      block:
        - name: Stop dawarich-server container
          community.docker.docker_container:
            name: dawarich-server
            state: stopped
            comparisons:
              '*': ignore

        - name: Move SQLite databases to dedicated directory
          ansible.builtin.command:
            cmd: mv -vf "{{ item.path }}" "{{ [dawarich_data_path, 'worker_db', item.path | basename] | path_join }}"
            creates: "{{ [dawarich_data_path, 'worker_db', item.path | basename] | path_join }}"
          register: move_sqlite_databases
          changed_when: move_sqlite_databases.rc == 0
          loop: "{{ sqlite_databases.files }}"
          loop_control:
            label: "{{ item.path | basename }}"

        # - name: Copy SQLite databases to dedicated directory
        #   ansible.builtin.copy:
        #     src: "{{ item.path }}"
        #     dest: "{{ [dawarich_data_path, 'worker_db', item.path | basename] | path_join }}"
        #     mode: '0644'
        #     owner: root
        #     group: root
        #     remote_src: true
        #   loop: "{{ sqlite_databases.files }}"
        #   loop_control:
        #     label: "{{ item.path | basename }}"
        #   when: migration_target_files.matched == 0

        # - name: Remove original SQLite databases
        #   ansible.builtin.file:
        #     path: "{{ item.path }}"
        #     state: absent
        #   loop: "{{ sqlite_databases.files }}"
        #   loop_control:
        #     label: "{{ item.path | basename }}"
        #   when: migration_target_files.matched == 0
